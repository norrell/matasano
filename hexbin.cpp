#include <iostream>
#include <vector>
#include <string>

#include "typedefs.h"

static const char hexdigits[] = "0123456789abcdef";
static const byte hashmap[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  !"#$%&'
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ()*+,-./
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 01234567
        0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89:;<=>?
        0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // @ABCDEFG
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // HIJKLMNO
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // PQRSTUVW
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // XYZ[\]^_
        0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };     // `abcdef

std::vector<byte> hex2bin(const std::string& hexstr)
{
    std::vector<byte> bin(hexstr.size() / 2, 0);

    if (hexstr.size() % 2) {
        std::cerr << "Even number of hex digits required" << std::endl;
        return bin;
    }

    byte first, second;
    for (int i = 0; i < hexstr.size() - 1; i += 2) {
        first = hashmap[(int) hexstr[i]];
        second = hashmap[(int) hexstr[i + 1]];
        bin[i / 2] = (byte) ((first << 4) | second);
    }

    return bin;
}

std::string bin2hex(const std::vector<byte>& bin)
{
    std::string str(2 * bin.size(), '.');

    byte u_nibble, l_nibble;
    for (int i = 0, k = 0; i < bin.size(); i += 1, k += 2) {
        u_nibble = bin[i] >> 4;
        l_nibble = bin[i] & 0x0f;
        str[k] = hexdigits[(int) u_nibble];
        str[k + 1] = hexdigits[(int) l_nibble];
    }

    return str;
}